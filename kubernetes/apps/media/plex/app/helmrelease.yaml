---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app plex
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.7.3
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    timeout: 120m
    remediation:
      retries: 3
  upgrade:
    timeout: 120m
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  dependsOn:
    - name: volsync
      namespace: volsync-system
  values:
    defaultPodOptions:
      runtimeClassName: nvidia
      securityContext:
        runAsNonRoot: true
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: [44, 10000, 8675309]
        seccompProfile: { type: RuntimeDefault }
    controllers:
      plex:
        labels:
          nfsMount: "true"
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: ghcr.io/onedr0p/plex
              tag: 1.41.2.9200-c6bbc1b53@sha256:1f28b5e5a964481f80e76db3c986082d2fc3bca2d16d2742704e9adf8349c79c
            env:
              TZ: ${TIMEZONE}
              PLEX_ADVERTISE_URL: https://plex.${SECRET_DOMAIN_MEDIA}:443,http://${SVC_PLEX_ADDR}:32400
              PLEX_NO_AUTH_NETWORKS: ${NODE_CIDR}
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /identity
                    port: 32400
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: true
                spec:
                  failureThreshold: 30
                  periodSeconds: 10
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 100m
                memory: 4Gi
                # nvidia.com/gpu: 1
              limits:
                memory: 16Gi
                # nvidia.com/gpu: 1
    service:
      app:
        controller: *app
        type: LoadBalancer
        annotations:
          lbipam.cilium.io/ips: ${SVC_PLEX_ADDR:=temp}
        externalTrafficPolicy: Cluster
        ports:
          http:
            port: 32400
    ingress:
      app:
        className: external
        annotations:
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Media
          gethomepage.dev/name: Plex
          gethomepage.dev/icon: plex.png
          gethomepage.dev/widget.type: plex
          gethomepage.dev/widget.url: http://plex.media.svc.cluster.local:32400
          gethomepage.dev/widget.key: "{{ `{{HOMEPAGE_VAR_PLEX_TOKEN}}` }}" # tells homepage to check for a secret with this value
          external-dns.alpha.kubernetes.io/target: external.${SECRET_DOMAIN}
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        hosts:
          - host: "{{ .Release.Name }}.${SECRET_DOMAIN_MEDIA}"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
    persistence:
      config:
        existingClaim: *app
      # Separate PVC for cache to avoid backing up cache files
      plex-cache:
        existingClaim: plex-cache
        globalMounts:
          - path: /config/Library/Application Support/Plex Media Server/Cache
      logs:
        type: emptyDir
        globalMounts:
          - path: /config/Library/Application Support/Plex Media Server/Logs
      tmp:
        type: emptyDir
      transcode:
        type: emptyDir
      media:
        type: nfs
        server: ${SECRET_NFS_SERVER:=temp}
        path: ${SECRET_NFS_MEDIA:=temp}
        globalMounts:
          - path: /data
            readOnly: true
      media-home:
        type: nfs
        server: ${SECRET_NFS_SERVER:=temp}
        path: ${SECRET_NFS_MEDIA_HOME:=temp}
        globalMounts:
          - path: /data/video/Home
            readOnly: true
